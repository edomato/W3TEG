* TRIGGERS

List of all used game states.
The list is not allways 100% up to date (check also view/js/config.js)


TEG Trigger States (short ts)............................

Transition        State     Description
================= ready ... state ready
start ........... play .... to start the game
exit ............ ready ... to exit the game
client_version .. ready ... client version
type_of_game .... ready ... to know the type of game
options ......... ready ... to set options
error ........... ready ... for any error's

================= play .... state play
field_data ...... play .... info about the field
field_select .... play .... to select a field
place ........... place ... to place n figures
attac ........... attac ... to attack a field by uid
move ............ move .... to move figures
card ............ card .... change to card state
game_lose ....... ready ... lose game
game_won ........ ready ... won game
game_surrender .. ready ... to surrender
save ............ ready ... to save the game
end_turn ........ play .... to finish youre turn
error ........... play .... for any error's

================= card .... state card
card_get ........ card .... to get a card
card_trade ...... card .... to trade a card
card_done ....... play .... leave card state
error ........... card .... for any error's

================= place ... state place
field_data ...... place ... info about the field
field_select .... place ... to select a field
place ........... place ... place n figures
place_done ...... play .... place done
error ........... place ... for any error's

================= attac ... state attac
field_data ...... attac ... info about the field
field_select .... attac ... to select a field
attac ........... attac ... to attac a field
attac_repeating . attac ... DO WE NEED THIS?
attac_until ..... attac ... DO WE NEED THIS?
attac_lose ...... attac ... DO WE NEED THIS?
attac_won ....... attac ... DO WE NEED THIS?
attac_done ...... play .... attac done
error ........... attac ... for any error's

================= move .... state move
field_data ...... move .... info about the field
field_select .... move .... to select a field
move ............ move .... move figures
move_done ....... play .... moveing done
error ........... move .... for any error's

* STATES

Cant remember why we named this part states?

{
    "rules": "traditional-missions",
    "theme": "traditional",
    "map": "traditional",
    "players": [],
    "continents": {}
    "countries": {}
    "roundNumber": -1,
    "round": [],
    "current": -1,
    "phase": -1,
    "cards": {}
}

* "players":
    - An array with at most 6 "player" objects.
* "player":
    - An object with the following shape:
        {
            "id": 0 <= id < 6, it's the player number (should correspond with the array index in "players"),
            "name": a string chosen by the player,
            "icon": ,
            "color": a string or number corresponding to the color chosen by the player,
            "score": score of the player,
            "mission": number corresponding to the mission to achieve if the mode chosen is "traditional-missions",
            "armies": the number of armies available for the player,
            "countries": an array with the id's of the countries owned by the player,
            "cards": an array with card ids
            "type": Human, Bot_Easy, Bot_Hard, Bot_Extreme as int value (0..3).
        }
* "continents":
    - An object containing (continentId, "continent" object) pairs.
    - The object will be initialized with a function getContinents(map), where map is the map seted previously in states
* "continent":
    - An object with the following shape:
        {
            "id": continent identifier,
            "name": name of the continent,
            "countries": array of countries identifiers
        }
* "countries":
    - An object containing (countryId, "country" object) pairs.
    - The object will be initialized with a function getCountries(map), where map is the map seted previously in states
* "country":
    - An object with the following shape:
        {
            "id": country identifier,
            "name": name of the country,
            "owner": the id of the player owning the country,
            "armies": number of armies placed in the country,
            "neighbours": an array with the neighbourgs countries,
            "continent": Identifier of the continent to which the country belongs
        }
* "roundNumber":
    - Number of round, starting from 0.
* "round":
    - An array of player ids, representing the order of the players in the round.
* "current":
    The index of the player who is playing.
* "phase":
    - 0 if it's placing armies phase.
    - 1 if it's attack phase.

var state:
    {
        "server_connect": ,
        "server_disconnetc": ,
        "choose_color": ,
        "card_get": ,
        "card_trade": ,
        "armies_place": ,
        "armies_move": ,
        "attac": ,
        "attac_repeating": ,    // repating as possible
        "attac_until": ,        // n armies left ot other dependings
        "attac_lose": ,
        "attac_won": ,
        "dice_role": ,
        "game_init": ,
        "game_lose": ,          // A player lose but can view the gameplay
        "game_won": ,
        "end_turn": ,
    };

* "cards":
    - An object containing (cardId, "card" object) pairs.

* "card":
    - An object with the following shape:
        {
            "id": card identifier,
            "country": name of the country represented by the card,
            "type": ship, cannon, airplane or wildcard, Internal we should use numbers (0-3).
            "status": owned by an user or not, any other?
             ^^^^^^ "owner": player or none ?
            "used": counter for use
            "selected": true || false
        }
